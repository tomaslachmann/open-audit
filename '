import { PostgresAdapter } from "./adapters/pg";
import { BaseAdapter } from "./adapters/base";
import { AuditInitConfig, AuditEvent } from "./adapters/types";
import { FileAdapter } from "./adapters/file";
import { MySQLAdapter } from "./adapters/mysql2";
import { BetterSqlite3Adapter } from "./adapters/sqlite";
import { MongoDBAdapter } from "./adapters/mongodb";

let adapter: BaseAdapter | null = null;

function checkAdapter(adapter: BaseAdapter | null) {
  if (adapter === null) {
    throw new Error(
      "[OpenAudit] Not initialized. Call OpenAudit.init(...) first.",
    );
  }
}

export const OpenAudit = {
  async init(config: AuditInitConfig) {
    switch (config.provider) {
      case "postgresql":
        adapter = new PostgresAdapter(config.pool, config.debug);
        break;
      case "mysql":
        adapter = new MySQLAdapter(config.pool, config.debug);
        break;
      case "file":
        adapter = new FileAdapter(config.path, config.debug);
        break;
      case "sqlite":
        adapter = new BetterSqlite3Adapter(config.db, config.debug);
        break;
      case "mongodb":
        adapter = new MongoDBAdapter(
          config.client,
          config.dbName,
          config.collectionName,
          config.debug,
        );
        break;
      default:
        throw new Error(`[OpenAudit] Unsupported provider`);
    }

    if (adapter !== null) {
      await adapter.init();
    }
  },

  async log(event: AuditEvent) {
    checkAdapter(adapter);
    // @ts-expect-error dn
    return await adapter.logEvent(event);
  },

  info(...args: any[]) {
    checkAdapter(adapter);
    // @ts-expect-error dn
    return adapter.logger.info(JSON.stringify(args));
  },

  error(...args: any[]) {
    checkAdapter(adapter);
    // @ts-expect-error dn
    return adapter.logger.error(JSON.stringify(args));
  },

  success(...args: any[]) {
    checkAdapter(adapter);
    // @ts-expect-error dn
    return adapter.logger.success(JSON.stringify(args));
  },

  debug(...args: any[]) {
    checkAdapter(adapter);
    // @ts-expect-error dn
    return adapter.logger.debug(JSON.stringify(args));
  },
};
